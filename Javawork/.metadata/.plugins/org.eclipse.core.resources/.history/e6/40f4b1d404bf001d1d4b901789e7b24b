package com.obj.run;
import com.obj.basiccontroller.BaseBallPlayer;
import com.obj.basiccontroller.BasicTestClass;
import com.obj.basiccontroller.FieldTestClass;
//import com.obj.basiccontroller.DefaultTestClass;

public class Main {
	public static void main(String[] args) {
		//프로젝트 내부에 선언된 클래스는 반드시 생성해야지만 이용이 가능
		//클래스를 생성하는 방법
		//new 연산자를 이용해서 생성한다.
		//new 클래스명() <-- 기본클래스 생성하는 방법(default 생성)
		
		//클래스 선언부에 있는 접근제한자에 따라 생성해서 이용할 수 있는 범위가 달라진다.
		//BasicTestClass생성하기
		new BasicTestClass();
		//DefaultTestClass생성하기
//		new DefaultTestClass();
		
		//프로젝트내에 선언된 클래스명은 하나의 자료형으로 사용한다.
		//참조형 자료형(Reference type)
		//클래스를 지정하는 변수를 만들수도 있다.
		BasicTestClass btc;//클래스로 생성하는 객체를 저장하는 변수를 선언
		btc=new BasicTestClass();
		//btc.
		
		//클래스에 선언된 필드(멤버변수)이용하기
		//클래스에 선언된 필드를 이용하려면 클래스를 객체화(생성)해야한다.
		FieldTestClass ftc;
		ftc=new FieldTestClass();
		
		//필드(멤버변수)에 접근하기
		System.out.println(ftc.age);
		//필드에 값 대입하기
		ftc.age=26;
		System.out.println(ftc.age);
		//default접근제한자를 사용한 필드접근
		//System.out.println(ftc.name);
		//private 접근제한자를 사용한 필드접근
		//System.out.println(ftc.gender);
		
		//베이스볼 플레이어 만들기
		//선수 3명을 만들기
		BaseBallPlayer p1,p2,p3;
		p1=new BaseBallPlayer();//선수 한명생성
		p1.name="박찬호";
		p1.age=49;
		p1.mainHand="오른손";
		p1.number=61;
		p1.position="p";
		p1.accuracy=70;
		p1.power=100;
		//p1 야구플레이어 -> 박찬호
		p2=new BaseBallPlayer();
		p2.name="이승엽";
		p2.age=46;
		p2.mainHand="왼손";
		p2.number=36;
		p2.position="1B";
		p2.accuracy=90;
		p2.power=100;
		
		
		//박찬호 정보출력하기
		System.out.println(p1);
		
	}

}
