git : 형상관리도구 -> 버전을 관리한다.
프로그램(파일)의 사본에 대한 생성, 보존, 복원을 한번에 관리해주는 프로그램

모델
	중앙집중모델 : CVS, SVN -> 이력관리하는 중앙 컴퓨터가 있는 모델.
	분산모델 : GIT -> 이용하는 각 컴퓨터가 모두  이력관리하는 것

GIT : 분산모델로 작성한 소스코드의 이력을 관리해주고, 여러개발자가 협업을 할 수 있게 해주는 형상관리 프로그램

LocalRepository(개발자컴퓨터) / RemoteRepository(네트워크상에서 공유되는 컴퓨터 : github) 두개 저장소를 이용


git 파일에 대한 이력을 관리해주는 프로그램이다!!!!

git에 의해 관리 되는 파일의 상태
1. commited : 파일내용이 수정되고 이력이 기록된 상태 -> 로컬저장소에 저장된 상태
2. modified : 파일내용을 수정하고 있는 상태, commit되기 전상태
3. staged : 파일내용을 수정하고 commit을 하기 위해 commit대상으로 된 상태

파일은 git에 의해 관리되는 파일과 관리하지않는 파일로 구분할 수 있음
1. tracked : git에 의해 관리되는 파일을 의미 -> 파일에 index를 부여한 상태
2. untracked : git에 의해 관리되지않는 파일을 의미 -> index가 부여되지 않고, 관리하지않음


git으로 프로젝트를 관리할때는 하나의 작업장 -> 브랜치
git repository를 생성하면 기본 브랜치 하나가 생성된다.(main, master)


git에서 사용하는 주요 명령어,용어
1. commit : 파일의 수정내역을 기록(저장)하는 명령어, 파일의 상태를 commited상태로 만들어주는 것, commit명령을 실행한 시점으로 기록유지
   * commit대상 파일은 staged된 파일만 가능하다. / 수정내역에 대한 history가 있음
2. add index : 파일을 tracked상태로 만들어줌. add index이후로 파일관리가 된다.
3. branch : 프로젝트의 파일을  수정할 수 있는 공간, 다수의 branch를 생성할 수 있고, 각 branch는 독립적으로 관리됨.
4. merge : 각브랜치에 저장된 내용을 합칠때 사용, 원격저장소에 있는 파일내용과 합칠때 사용 *pull, push명령을 이용하면 자동으로 merge함.

5. push : localrepository에서 지정된 remoterepository에 저장(merge)시키는 것
6. pull : remoterepository에서 localrepository로 가져오는 것(merge)
7. fetch : remoterepository에서 localrepositry로 가져오는것(merge하지않음)

.gitignore파일 : git에 의해 관리하지않을 파일을 등록하는 파일
conflict : 다른 branch에서 동일한 파일의 동일한 라인내용을 다르게 저장하고 merge하면 발생하는 것!
* 개발자가 직접 처리해야한다. -> 필요한 부분을 남기고 삭제 후 commit함.


gitbash(cli로 작성하기), e-git, source tree, vscode git, intelij git































